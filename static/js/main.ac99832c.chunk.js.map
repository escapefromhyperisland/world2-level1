{"version":3,"sources":["components/Introduction/Introduction.jsx","components/Card/Card.jsx","components/MemoryGame.jsx","components/Button/Button.jsx","components/Keyboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Introduction","id","Card","props","className","onClick","onFlip","isFlipped","number","MemoryGame","useState","numbers","setNumbers","flippedCard","setFlippedCard","latestSelectedCard","setLatestSelectedCard","useEffect","index","updatedNumbers","filter","setTimeout","isCardFlipped","isFlippedCard","isLatestSelectedCard","map","selectedCard","Button","typedNumber","Keyboard","password","setPassword","updatePassword","alert","window","parent","postMessage","validationChallenge3","App","changeDisplay","idToNone","idToBlock","document","getElementById","style","display","htmlFor","type","alarmCode","value","validationChallenge1","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6QAkBeA,EAfM,WACb,OACI,qCACI,oBAAIC,GAAG,QAAP,4BACA,oBAAGA,GAAG,oBAAN,UACI,uDACA,uBAFJ,kRAII,uBACA,uBALJ,8K,OCMDC,G,MAVF,SAACC,GACV,OACI,mCACI,wBAAQC,UAAU,OAAOC,QAAS,WAC9BF,EAAMG,UADV,SAEIH,EAAMI,UAAYJ,EAAMK,OAAS,sBCqDlCC,EA1DI,WAEf,MAA8BC,mBAAS,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,WAAxH,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,MAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoDJ,mBAAS,MAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KAEAC,qBAAU,WACN,GAAIJ,GAAeE,EAAoB,CACnC,GAAKF,EAAYL,SAAWO,EAAmBP,QACvCK,EAAYK,QAAUH,EAAmBG,MAAQ,CAErD,IAAMC,EAAiBR,EAAQS,QAAO,SAAAZ,GAAM,OAAIA,IAAWK,EAAYL,UACvEa,YAAW,WAAQT,EAAWO,KAAmB,KAGrDE,YAAW,WACPP,EAAe,MACfE,EAAsB,QACvB,QAER,CAACH,EAAaE,EAAoBJ,IAErC,IAQMW,EAAgB,SAAC,GAAuB,IAArBd,EAAoB,EAApBA,OAAQU,EAAY,EAAZA,MACvBK,EAAgBV,GACfA,EAAYK,QAAUA,GACtBL,EAAYL,SAAWA,EAExBgB,EAAuBT,GACtBA,EAAmBG,QAAUA,GAC7BH,EAAmBP,SAAWA,EAErC,OAAOe,GAAiBC,GAG5B,OACI,qBAAKvB,GAAG,eAAR,SACKU,EAAQc,KAAI,SAACjB,EAAQU,GAClB,OACI,cAAC,EAAD,CAEIZ,OAAQ,kBA1BVoB,EA0ByB,CAAElB,SAAQU,cAzB5CL,EAEOE,GACRC,EAAsBU,GAFtBZ,EAAeY,IAFN,IAACA,GA2BElB,OAAQA,EACRD,UAAWe,EAAc,CAAEd,SAAQU,WAH9BA,SCvCdS,G,MARA,SAACxB,GACZ,OACI,mCACI,wBAAQF,GAAG,eAAeI,QAAS,WAAOF,EAAMyB,YAAYzB,EAAMK,SAAlE,SAA6EL,EAAMK,aCyChFqB,EA5CE,WAEb,MAAgCnB,mBAAS,IAAzC,mBAAOoB,EAAP,KAAiBC,EAAjB,KAEMC,EAAiB,SAACxB,GACpBuB,EAAYD,EAAWtB,IAa3B,OACI,qCACI,sBAAKJ,UAAU,gBAAf,UACI,cAAC,EAAD,CAAQI,OAAO,IAAIoB,YAAaI,IAChC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,IAChC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,OAGpC,sBAAK5B,UAAU,gBAAf,UACI,cAAC,EAAD,CAAQI,OAAO,IAAIoB,YAAaI,IAChC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,IAChC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,OAGpC,sBAAK5B,UAAU,gBAAf,UACI,cAAC,EAAD,CAAQI,OAAO,IAAIoB,YAAaI,IAChC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,IAChC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,OAEpC,cAAC,EAAD,CAAQxB,OAAO,IAAIoB,YAAaI,IAChC,wBAAQ5B,UAAU,SAASC,QAAS,YA9Bf,SAACyB,GACT,WAAbA,GACAG,MAAM,yIACNC,OAAOC,OAAOC,YAAY,cAE1BH,MAAM,8EAEVF,EAAY,IAwBJM,CAAqBP,IADzB,gCC6BGQ,MAjEf,WAEE,IAAMC,EAAgB,SAACC,EAAUC,GAC/BC,SAASC,eAAeH,GAAUI,MAAMC,QAAU,OAClDH,SAASC,eAAeF,GAAWG,MAAMC,QAAU,SAgBrD,OACE,qCACE,sBAAK5C,GAAG,QAAR,UACE,cAAC,EAAD,IACA,wBAAQG,UAAU,SAASC,QAAS,WAAQkC,EAAc,QAAS,eAAnE,6BAGF,sBAAKtC,GAAG,aAAR,UACE,oBAAGA,GAAG,YAAN,2HACgH,6CADhH,gEAGA,uBAAOA,GAAG,gBAAgB6C,QAAQ,eAAlC,uCACA,uBAAO7C,GAAG,gBAAgB8C,KAAK,SAC/B,wBAAQ3C,UAAU,SAASC,QAAS,YA1Bb,WAC3B,IAAM2C,EAAYN,SAASC,eAAe,iBAAiBM,MACzC,KAAdD,EACFf,MAAM,kEAEe,kBAAde,GACPf,MAAM,6DACNM,EAAc,aAAc,eAE5BN,MAAM,uDAiBwCiB,IAA5C,8BAGF,sBAAKjD,GAAG,aAAR,UACE,oBAAGG,UAAU,aAAb,uEACA,uBADA,2EAGA,uBACA,uBAJA,0NAMA,mBAAGA,UAAU,eAAb,6EACA,cAAC,EAAD,IACA,wBAAQA,UAAU,SAASC,QAAS,WAElC4B,MAAM,yEACNM,EAAc,aAAc,eAH9B,oCAQF,sBAAKtC,GAAG,aAAR,UACE,mBAAGG,UAAU,aAAb,2QAGA,oBAAGA,UAAU,eAAb,mEAAkF,wBAAQH,GAAG,cAAcI,QAAS,WAAQkC,EAAc,aAAc,eAAtE,kBAAlF,OACA,cAAC,EAAD,WCnDOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,M","file":"static/js/main.ac99832c.chunk.js","sourcesContent":["import React from 'react';\nimport './Introduction.css';\n\nconst Introduction = () => {\n        return (\n            <>\n                <h1 id='title'>Hack the Vault</h1>\n                <p id='intro-description'>\n                    <strong>WELCOME TO HI-22.</strong> \n                    <br/>\n                    Here the space scavenger will meet the OXOs, they are the inhabitants of this planet. They are not very happy that he came uninvited and because of that, they stole some pieces of his spaceship. Your mission in this game is to recover the missing pieces and escape HI-22.    \n                    <br/>\n                    <br/>\n                    The OXOs are hiding the spaceship's GPS in a secret vault. In order to find it, you have a mission. The mission is to hack the secret vault and get the missing GPS.</p>\n            </>\n        )\n    }\n\nexport default Introduction;","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n    return (\n        <>\n            <button className='card' onClick={() => {\n                props.onFlip();\n            }}>{props.isFlipped ? props.number : 'Click to flip'}</button>\n        </>\n    )\n}\n\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport Card from './Card/Card';\n\nconst MemoryGame = () => {\n\n    const [numbers, setNumbers] = useState(['876345', '647912', '513864', '982637', '876345', '513864', '134076', '647912', '982637'])\n    const [flippedCard, setFlippedCard] = useState(null)\n    const [latestSelectedCard, setLatestSelectedCard] = useState(null)\n\n    useEffect(() => {\n        if (flippedCard && latestSelectedCard) {\n            if ((flippedCard.number === latestSelectedCard.number)\n                && (flippedCard.index !== latestSelectedCard.index)) {\n\n                const updatedNumbers = numbers.filter(number => number !== flippedCard.number)\n                setTimeout(() => { setNumbers(updatedNumbers) }, 750);\n            }\n\n            setTimeout(() => {\n                setFlippedCard(null)\n                setLatestSelectedCard(null)\n            }, 750);\n        }\n    }, [flippedCard, latestSelectedCard, numbers]);\n\n    const flipCard = (selectedCard) => {\n        if (!flippedCard) {\n            setFlippedCard(selectedCard)\n        } else if (!latestSelectedCard) {\n            setLatestSelectedCard(selectedCard)\n        }\n    }\n\n    const isCardFlipped = ({ number, index }) => {\n        const isFlippedCard = flippedCard\n            && flippedCard.index === index\n            && flippedCard.number === number\n\n        const isLatestSelectedCard = latestSelectedCard\n            && latestSelectedCard.index === index\n            && latestSelectedCard.number === number\n\n        return isFlippedCard || isLatestSelectedCard\n    }\n\n    return (\n        <div id='card-section'>\n            {numbers.map((number, index) => {\n                return (\n                    <Card\n                        key={index}\n                        onFlip={() => flipCard({ number, index })}\n                        number={number}\n                        isFlipped={isCardFlipped({ number, index })}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default MemoryGame;","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => {\n    return (\n        <>\n            <button id='keyboard-btn' onClick={() => {props.typedNumber(props.number)}}>{props.number}</button>\n        </>\n    )\n}\n\nexport default Button;","import React, {useState} from 'react';\nimport Button from './Button/Button';\n\nconst Keyboard = () => {\n\n    const [password, setPassword] = useState('')\n\n    const updatePassword = (number) => {\n        setPassword(password + number);\n    }\n\n    const validationChallenge3 = (password) => {\n        if (password === '134076') {\n            alert('CONGRATS! You hacked the vault and recovered the lost GPS! Press ok to move forward to the next level and find more spaceship pieces!');\n            window.parent.postMessage('nextLevel');\n        } else {\n            alert('Sorry, you have the wrong password. The vault was not hacked! Start again.');\n        }\n        setPassword('');\n    }\n\n    return (\n        <>\n            <div className='btn-container'>\n                <Button number='1' typedNumber={updatePassword}/>\n                <Button number='2' typedNumber={updatePassword}/>\n                <Button number='3' typedNumber={updatePassword}/>\n            </div>\n\n            <div className='btn-container'>\n                <Button number='4' typedNumber={updatePassword}/>\n                <Button number='5' typedNumber={updatePassword}/>\n                <Button number='6' typedNumber={updatePassword}/>\n            </div>\n\n            <div className='btn-container'>\n                <Button number='7' typedNumber={updatePassword}/>\n                <Button number='8' typedNumber={updatePassword}/>\n                <Button number='9' typedNumber={updatePassword}/>\n            </div>\n            <Button number='0' typedNumber={updatePassword}/>\n            <button className='button' onClick={()=> {\n                validationChallenge3(password)}}>OPEN THE VAULT</button>\n        </>\n    )\n}\n\nexport default Keyboard;","import './App.css';\nimport Introduction from './components/Introduction/Introduction';\nimport MemoryGame from './components/MemoryGame';\nimport Keyboard from './components/Keyboard';\n\nfunction App() {\n\n  const changeDisplay = (idToNone, idToBlock) => {\n    document.getElementById(idToNone).style.display = 'none';\n    document.getElementById(idToBlock).style.display = 'block';\n  }\n\n  const validationChallenge1 = () => {\n    const alarmCode = document.getElementById('inspect-input').value;\n    if (alarmCode === '') {\n      alert('You need to type something, mate! What kind of hacker are you?');\n    }\n    else if (alarmCode === 'ALIENS_ROCK!!') {\n      alert('You did it! Press ok to move forward to the next mission!')\n      changeDisplay('challenge1', 'challenge2');\n    } else {\n      alert('Sorry, you have the wrong code. Alarm not disabled!');\n    }\n  }\n\n  return (\n    <>\n      <div id='intro'>\n        <Introduction />\n        <button className='button' onClick={() => { changeDisplay('intro', 'challenge1') }}>LET'S DO IT!</button>\n      </div>\n\n      <div id='challenge1'>\n        <p id='inspect-p'>\n          First, you need to find the code to disable the vault's alarm. To find the alarm's code, you need to Hack and <strong>inspect</strong> the hell out of this vault! Find the code and type below.\n        </p>\n        <label id='inspect-label' htmlFor='inspect-code'>Type here the alarm code:</label>\n        <input id='inspect-input' type='text'></input>\n        <button className='button' onClick={() => { validationChallenge1() }}>DISABLE ALARM</button>\n      </div>\n\n      <div id='challenge2'>\n        <p className='password-p'>Amazing! You found the code and now the alarm is disabled. \n        <br/>\n        The next task in this mission is to find the password to open the vault. \n        <br/>\n        <br/>\n        To find the password, you will need to hack the vault system. To make it harder, the OXOs have a firewall memory card game. Only one card is unique and it contains the password. Finish the game and find the card!</p>\n        <p className='password-sub'>Don't forget to memorize the password, you will need it later! </p>\n        <MemoryGame />\n        <button className='button' onClick={() => { \n          \n          alert('Great job, you hacker! Press ok to move forward to the final mission.')\n          changeDisplay('challenge2', 'challenge3') \n          \n        }}>I HAVE THE PASSWORD</button>\n      </div>\n\n      <div id='challenge3'>\n        <p className='password-p'>\n        Nice hacking so far! Now for the final mission, let's see if you have the correct password! All you have to do to open the vault is to type the password in the vault's keyboard. Click below on the correct numbers, in the correct order to open the vault!\n        </p>\n        <p className='password-sub'>If you need a sneak peek of the password again, press <button id='back-button' onClick={() => { changeDisplay('challenge3', 'challenge2') }}>here</button>.</p>\n        <Keyboard />\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}